version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: churn-predictor-db
    environment:
      POSTGRES_DB: churn_prediction
      POSTGRES_USER: churn_user
      POSTGRES_PASSWORD: churn_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - churn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U churn_user -d churn_prediction"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: churn-predictor-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - churn-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # MLflow Tracking Server
  mlflow:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.mlflow
    container_name: churn-predictor-mlflow
    environment:
      MLFLOW_TRACKING_URI: http://localhost:5000
      MLFLOW_BACKEND_STORE_URI: postgresql://churn_user:churn_password@postgres:5432/mlflow
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /mlflow/artifacts
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - churn-network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: churn-predictor-api
    environment:
      - DATABASE_URL=postgresql://churn_user:churn_password@postgres:5432/churn_prediction
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      - ENABLE_REDIS_CACHE=true
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_started
    networks:
      - churn-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: churn-predictor-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - churn-network
    depends_on:
      - api

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: churn-predictor-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - churn-network
    depends_on:
      - prometheus

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: churn-predictor-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - churn-network

  # Training container (for model training)
  trainer:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.training
    container_name: churn-predictor-trainer
    environment:
      - DATABASE_URL=postgresql://churn_user:churn_password@postgres:5432/churn_prediction
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./notebooks:/app/notebooks
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_started
    networks:
      - churn-network
    profiles:
      - training

volumes:
  postgres_data:
  redis_data:
  mlflow_artifacts:
  prometheus_data:
  grafana_data:

networks:
  churn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Development profile for local development
services:
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: churn-predictor-api-dev
    environment:
      - DATABASE_URL=postgresql://churn_user:churn_password@postgres:5432/churn_prediction
      - REDIS_URL=redis://redis:6379
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=DEBUG
      - API_RELOAD=true
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./models:/app/models
      - ./data:/app/data
      - ./notebooks:/app/notebooks
    ports:
      - "8001:8000"
      - "8002:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - churn-network
    profiles:
      - dev